apiVersion: v1
kind: ConfigMap
metadata:
  name: app-settings
  labels:
    app: app-settings
data:
  DB_URL: postgresdb:5432
  DB_USER: root
  DB_PASS: abc123
  DB_NAME: namedb
# Create a secret and store securely in Kubernetes
# kubectl create secret generic vault-token --from-literal=vault-token=my-token
# Create docker registry secret in your target namespace
# kubectl create secret docker-registry <your-secret-name> --docker-server=<your-registry> --docker-username=<your-user> --docker-password="<your-password>" --docker-email="<YOUR-EMAIL>"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresdb
  labels:
    app: postgresdb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresdb
  template:
    metadata:
      labels:
        app: postgresdb
    spec:
      containers:
      - name: postgresdb
        image: postgres
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: app-settings
              key: DB_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: app-settings
              key: DB_PASS
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: app-settings
              key: DB_NAME
      
---
apiVersion: v1
kind: Service
metadata:
 name: postgresdb
spec:
 type: NodePort
 selector:
    app: postgresdb
 ports:
 - port: 5432
   targetPort: 5432


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
  labels:
    app: adminer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        image: adminer
        ports:
        - containerPort: 8080
      
---
apiVersion: v1
kind: Service
metadata:
 name: adminer
spec:
 type: LoadBalancer
 selector:
    app: adminer
 ports:
 - port: 8001
   targetPort: 8080


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nameapi
  labels:
    app: nameapi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nameapi
  template:
    metadata:
      labels:
        app: nameapi
    spec:
      containers:
      - name: name-api
        image: nameapi:1.0
        ports:
        - containerPort: 8080
        resources: {}
        envFrom:
        - configMapRef:
            name: app-settings

---
apiVersion: v1
kind: Service
metadata:
 name: api
spec:
 type: LoadBalancer
 selector:
    app: nameapi
 ports:
 - port: 8080
   targetPort: 8080
